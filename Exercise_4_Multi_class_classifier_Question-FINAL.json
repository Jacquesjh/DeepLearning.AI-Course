{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "wYtuKeK0dImp"
   },
   "outputs": [],
   "source": [
    "# ATTENTION: Please do not alter any of the provided code in the exercise. Only add your own code where indicated\n",
    "# ATTENTION: Please do not add or remove any cells in the exercise. The grader will check specific cells based on the cell position.\n",
    "# ATTENTION: Please use the provided epoch values when training.\n",
    "\n",
    "import csv\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from os import getcwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "4kxw-_rmcnVu"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(27455, 28, 28)\n",
      "(27455,)\n",
      "(7172, 28, 28)\n",
      "(7172,)\n"
     ]
    }
   ],
   "source": [
    "def get_data(filename):\n",
    "  # You will need to write code that will read the file passed\n",
    "  # into this function. The first line contains the column headers\n",
    "  # so you should ignore it\n",
    "  # Each successive line contians 785 comma separated values between 0 and 255\n",
    "  # The first value is the label\n",
    "  # The rest are the pixel values for that picture\n",
    "  # The function will return 2 np.array types. One with all the labels\n",
    "  # One with all the images\n",
    "  #\n",
    "  # Tips: \n",
    "  # If you read a full line (as 'row') then row[0] has the label\n",
    "  # and row[1:785] has the 784 pixel values\n",
    "  # Take a look at np.array_split to turn the 784 pixels into 28x28\n",
    "  # You are reading in strings, but need the values to be floats\n",
    "  # Check out np.array().astype for a conversion\n",
    "    with open(filename) as training_file:\n",
    "      #  Your code starts here\n",
    "        loaded_data = np.loadtxt(filename, delimiter = ',', skiprows = 1)\n",
    "        \n",
    "        labels = loaded_data[:, 0].astype(int)\n",
    "        image = loaded_data[:, 1:].astype(float)\n",
    "        image = image.reshape(image.shape[0], 28, 28)\n",
    "        \n",
    "        loaded_data = None\n",
    "      # Your code ends here\n",
    "    return image, labels\n",
    "\n",
    "path_sign_mnist_train = f\"{getcwd()}/../tmp2/sign_mnist_train.csv\"\n",
    "path_sign_mnist_test = f\"{getcwd()}/../tmp2/sign_mnist_test.csv\"\n",
    "training_images, training_labels = get_data(path_sign_mnist_train)\n",
    "testing_images, testing_labels = get_data(path_sign_mnist_test)\n",
    "\n",
    "# Keep these\n",
    "print(training_images.shape)\n",
    "print(training_labels.shape)\n",
    "print(testing_images.shape)\n",
    "print(testing_labels.shape)\n",
    "\n",
    "# Their output should be:\n",
    "# (27455, 28, 28)\n",
    "# (27455,)\n",
    "# (7172, 28, 28)\n",
    "# (7172,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "awoqRpyZdQkD"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(27455, 28, 28, 1)\n",
      "(7172, 28, 28, 1)\n"
     ]
    }
   ],
   "source": [
    "# In this section you will have to add another dimension to the data\n",
    "# So, for example, if your array is (10000, 28, 28)\n",
    "# You will need to make it (10000, 28, 28, 1)\n",
    "# Hint: np.expand_dims\n",
    "\n",
    "training_images = np.expand_dims(training_images,3)\n",
    "testing_images = np.expand_dims(testing_images, 3)\n",
    "\n",
    "# Create an ImageDataGenerator and do Image Augmentation\n",
    "train_datagen = ImageDataGenerator(rescale = 1/255.0,\n",
    "                                   #rotation_range = 90,\n",
    "                                   #width_shift_range = 0.2,\n",
    "                                   #height_shift_range = 0.2,\n",
    "                                   #shear_range = 0.2,\n",
    "                                   #zoom_range = 0.2,\n",
    "                                   #horizontal_flip = True,\n",
    "                                   #fill_mode = 'nearest'\n",
    "                                   \n",
    "    # Your Code Here\n",
    "    )\n",
    "\n",
    "validation_datagen = ImageDataGenerator(rescale = 1/255.0,\n",
    "                                   #rotation_range = 90,\n",
    "                                   #width_shift_range = 0.2,\n",
    "                                   #height_shift_range = 0.2,\n",
    "                                   #shear_range = 0.2,\n",
    "                                   #zoom_range = 0.2,\n",
    "                                   #horizontal_flip = True,\n",
    "                                   #fill_mode = 'nearest'\n",
    "                                   \n",
    "    # Your Code Here\n",
    "    )\n",
    "    \n",
    "# Keep These\n",
    "print(training_images.shape)\n",
    "print(testing_images.shape)\n",
    "    \n",
    "# Their output should be:\n",
    "# (27455, 28, 28, 1)\n",
    "# (7172, 28, 28, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Rmb7S32cgRqS"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/2\n",
      "858/857 [==============================] - 53s 62ms/step - loss: 0.9866 - accuracy: 0.6669 - val_loss: 0.5937 - val_accuracy: 0.8345\n",
      "Epoch 2/2\n",
      "858/857 [==============================] - 52s 61ms/step - loss: 0.0622 - accuracy: 0.9799 - val_loss: 0.3751 - val_accuracy: 0.8968\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[121.81734113379423, 0.8339375]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define the model\n",
    "# Use no more than 2 Conv2D and 2 MaxPooling2D\n",
    "model = tf.keras.models.Sequential([\n",
    "    tf.keras.layers.Conv2D(64, (3, 3), input_shape = (28, 28, 1), activation = 'relu'),\n",
    "    tf.keras.layers.MaxPooling2D(pool_size = (2, 2)),\n",
    "    tf.keras.layers.Conv2D(128, (5, 5), activation = 'relu'),\n",
    "    tf.keras.layers.MaxPooling2D(pool_size = (2, 2)),\n",
    "    \n",
    "    tf.keras.layers.Flatten(),\n",
    "    \n",
    "    tf.keras.layers.Dense(512, activation = 'relu'),\n",
    "    tf.keras.layers.Dropout(0.1),\n",
    "    tf.keras.layers.Dense(512, activation = 'relu'),\n",
    "    tf.keras.layers.Dropout(0.1),\n",
    "    \n",
    "    tf.keras.layers.Dense(128, activation = 'relu'),\n",
    "    tf.keras.layers.Dense(1024, activation = 'relu'),\n",
    "    \n",
    "    tf.keras.layers.Dense((len(np.unique(training_labels)) + 1), activation = 'softmax')\n",
    "    # Your Code Here\n",
    "    ])\n",
    "\n",
    "#model.summary()\n",
    "\n",
    "# Compile Model. \n",
    "model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])\n",
    "\n",
    "batch = 32\n",
    "\n",
    "# Train the Model\n",
    "history = model.fit_generator(train_datagen.flow(training_images, training_labels, batch_size = batch),\n",
    "                              steps_per_epoch = len(training_images)/batch,\n",
    "                              epochs = 2,\n",
    "                              validation_data = validation_datagen.flow(testing_images, testing_labels, batch_size = batch),\n",
    "                              validation_steps = len(testing_images)/batch,\n",
    "                              verbose = 1)\n",
    "\n",
    "model.evaluate(testing_images, testing_labels, verbose=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "_Q3Zpr46dsij"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the chart for accuracy and loss on both training and validation\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "acc = history.history['accuracy']\n",
    "val_acc = history.history['val_accuracy']\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "\n",
    "epochs = range(len(acc))\n",
    "\n",
    "plt.plot(epochs, acc, 'r', label='Training accuracy')\n",
    "plt.plot(epochs, val_acc, 'b', label='Validation accuracy')\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.legend()\n",
    "plt.figure()\n",
    "\n",
    "plt.plot(epochs, loss, 'r', label='Training Loss')\n",
    "plt.plot(epochs, val_loss, 'b', label='Validation Loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Submission Instructions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now click the 'Submit Assignment' button above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# When you're done or would like to take a break, please run the two cells below to save your work and close the Notebook. This will free up resources for your fellow learners. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "<!-- Save the notebook -->\n",
       "IPython.notebook.save_checkpoint();\n"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%javascript\n",
    "<!-- Save the notebook -->\n",
    "IPython.notebook.save_checkpoint();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "IPython.notebook.session.delete();\n",
       "window.onbeforeunload = null\n",
       "setTimeout(function() { window.close(); }, 1000);\n"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%javascript\n",
    "IPython.notebook.session.delete();\n",
    "window.onbeforeunload = null\n",
    "setTimeout(function() { window.close(); }, 1000);"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "Exercise 8 - Question.ipynb",
   "provenance": []
  },
  "coursera": {
   "course_slug": "convolutional-neural-networks-tensorflow",
   "graded_item_id": "8mIh8",
   "launcher_item_id": "gg95t"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
